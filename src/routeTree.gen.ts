/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteRouteImport } from './routes/login/route'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as SessionSessionIdRouteImport } from './routes/session/$sessionId'
import { Route as AppShareChatIdRouteImport } from './routes/_app/share/$chatId'
import { Route as AppChatChatIdRouteImport } from './routes/_app/chat/$chatId'

const LoginRouteRoute = LoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const SessionSessionIdRoute = SessionSessionIdRouteImport.update({
  id: '/session/$sessionId',
  path: '/session/$sessionId',
  getParentRoute: () => rootRouteImport,
} as any)
const AppShareChatIdRoute = AppShareChatIdRouteImport.update({
  id: '/share/$chatId',
  path: '/share/$chatId',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppChatChatIdRoute = AppChatChatIdRouteImport.update({
  id: '/chat/$chatId',
  path: '/chat/$chatId',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '': typeof AppRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/': typeof AppIndexRoute
  '/chat/$chatId': typeof AppChatChatIdRoute
  '/share/$chatId': typeof AppShareChatIdRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRouteRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/': typeof AppIndexRoute
  '/chat/$chatId': typeof AppChatChatIdRoute
  '/share/$chatId': typeof AppShareChatIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/_app/': typeof AppIndexRoute
  '/_app/chat/$chatId': typeof AppChatChatIdRoute
  '/_app/share/$chatId': typeof AppShareChatIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/session/$sessionId'
    | '/'
    | '/chat/$chatId'
    | '/share/$chatId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/session/$sessionId'
    | '/'
    | '/chat/$chatId'
    | '/share/$chatId'
  id:
    | '__root__'
    | '/_app'
    | '/login'
    | '/session/$sessionId'
    | '/_app/'
    | '/_app/chat/$chatId'
    | '/_app/share/$chatId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRoute
  SessionSessionIdRoute: typeof SessionSessionIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/session/$sessionId': {
      id: '/session/$sessionId'
      path: '/session/$sessionId'
      fullPath: '/session/$sessionId'
      preLoaderRoute: typeof SessionSessionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/share/$chatId': {
      id: '/_app/share/$chatId'
      path: '/share/$chatId'
      fullPath: '/share/$chatId'
      preLoaderRoute: typeof AppShareChatIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/chat/$chatId': {
      id: '/_app/chat/$chatId'
      path: '/chat/$chatId'
      fullPath: '/chat/$chatId'
      preLoaderRoute: typeof AppChatChatIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppChatChatIdRoute: typeof AppChatChatIdRoute
  AppShareChatIdRoute: typeof AppShareChatIdRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppChatChatIdRoute: AppChatChatIdRoute,
  AppShareChatIdRoute: AppShareChatIdRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRoute,
  SessionSessionIdRoute: SessionSessionIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
