/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ShareRouteRouteImport } from './routes/share/route'
import { Route as LoginRouteRouteImport } from './routes/login/route'
import { Route as ChatRouteRouteImport } from './routes/chat/route'
import { Route as RouteRouteImport } from './routes/route'
import { Route as ShareChatIdRouteImport } from './routes/share/$chatId'
import { Route as SessionSessionIdRouteImport } from './routes/session/$sessionId'
import { Route as ChatChatIdRouteImport } from './routes/chat/$chatId'

const ShareRouteRoute = ShareRouteRouteImport.update({
  id: '/share',
  path: '/share',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRouteRoute = LoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatRouteRoute = ChatRouteRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRouteImport,
} as any)
const RouteRoute = RouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ShareChatIdRoute = ShareChatIdRouteImport.update({
  id: '/$chatId',
  path: '/$chatId',
  getParentRoute: () => ShareRouteRoute,
} as any)
const SessionSessionIdRoute = SessionSessionIdRouteImport.update({
  id: '/session/$sessionId',
  path: '/session/$sessionId',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatChatIdRoute = ChatChatIdRouteImport.update({
  id: '/$chatId',
  path: '/$chatId',
  getParentRoute: () => ChatRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof RouteRoute
  '/chat': typeof ChatRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/share': typeof ShareRouteRouteWithChildren
  '/chat/$chatId': typeof ChatChatIdRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/share/$chatId': typeof ShareChatIdRoute
}
export interface FileRoutesByTo {
  '/': typeof RouteRoute
  '/chat': typeof ChatRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/share': typeof ShareRouteRouteWithChildren
  '/chat/$chatId': typeof ChatChatIdRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/share/$chatId': typeof ShareChatIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof RouteRoute
  '/chat': typeof ChatRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/share': typeof ShareRouteRouteWithChildren
  '/chat/$chatId': typeof ChatChatIdRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/share/$chatId': typeof ShareChatIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/login'
    | '/share'
    | '/chat/$chatId'
    | '/session/$sessionId'
    | '/share/$chatId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/chat'
    | '/login'
    | '/share'
    | '/chat/$chatId'
    | '/session/$sessionId'
    | '/share/$chatId'
  id:
    | '__root__'
    | '/'
    | '/chat'
    | '/login'
    | '/share'
    | '/chat/$chatId'
    | '/session/$sessionId'
    | '/share/$chatId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  RouteRoute: typeof RouteRoute
  ChatRouteRoute: typeof ChatRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRoute
  ShareRouteRoute: typeof ShareRouteRouteWithChildren
  SessionSessionIdRoute: typeof SessionSessionIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/share': {
      id: '/share'
      path: '/share'
      fullPath: '/share'
      preLoaderRoute: typeof ShareRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/share/$chatId': {
      id: '/share/$chatId'
      path: '/$chatId'
      fullPath: '/share/$chatId'
      preLoaderRoute: typeof ShareChatIdRouteImport
      parentRoute: typeof ShareRouteRoute
    }
    '/session/$sessionId': {
      id: '/session/$sessionId'
      path: '/session/$sessionId'
      fullPath: '/session/$sessionId'
      preLoaderRoute: typeof SessionSessionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat/$chatId': {
      id: '/chat/$chatId'
      path: '/$chatId'
      fullPath: '/chat/$chatId'
      preLoaderRoute: typeof ChatChatIdRouteImport
      parentRoute: typeof ChatRouteRoute
    }
  }
}

interface ChatRouteRouteChildren {
  ChatChatIdRoute: typeof ChatChatIdRoute
}

const ChatRouteRouteChildren: ChatRouteRouteChildren = {
  ChatChatIdRoute: ChatChatIdRoute,
}

const ChatRouteRouteWithChildren = ChatRouteRoute._addFileChildren(
  ChatRouteRouteChildren,
)

interface ShareRouteRouteChildren {
  ShareChatIdRoute: typeof ShareChatIdRoute
}

const ShareRouteRouteChildren: ShareRouteRouteChildren = {
  ShareChatIdRoute: ShareChatIdRoute,
}

const ShareRouteRouteWithChildren = ShareRouteRoute._addFileChildren(
  ShareRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  RouteRoute: RouteRoute,
  ChatRouteRoute: ChatRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRoute,
  ShareRouteRoute: ShareRouteRouteWithChildren,
  SessionSessionIdRoute: SessionSessionIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
